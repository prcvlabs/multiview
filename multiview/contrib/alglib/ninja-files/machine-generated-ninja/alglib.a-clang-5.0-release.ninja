
# Machine generated ninja
#   
#   Toolchain = clang-5.0
#   Config    = release
#   Buildtype = static
#   Target    = products/clang-5.0-release/alglib.a
#   Source    = cpp/src
#

CC    = nice ionice -c3 clang-5.0
MOC   = qtchooser -run-tool=moc -qt=5
RCC   = qtchooser -run-tool=rcc -qt=5
SCAN  = clang-5.0
PROTO = protoc
cc_desc = clang

cpp_std = -std=c++17
d_flags = -g3 -gdwarf-2 -DDEBUG -fno-omit-frame-pointer -fno-optimize-sibling-calls
r_flags = -march=native -DRELEASE -DNDEBUG
o_flag  = -O2
w_flags = -Wall -Wextra -Wpedantic -Werror -Wno-unused -Winvalid-pch
f_flags = -fPIC -fdiagnostics-color=always -ferror-limit=4
s_flags = -g -fno-omit-frame-pointer -fno-optimize-sibling-calls

l_flags = -fuse-ld=lld -lm -lstdc++

asan_flags = -DADDRESS_SANITIZE -fsanitize=address -fsanitize=leak
asan_link  = -fsanitize=address

usan_flags = -DUNDEFINED_SANITIZE -fsanitize=undefined -fsanitize=integer -fsanitize=nullability
usan_link  = -fsanitize=undefined -lubsan

prof_flags = -DBENCHMARK -fno-omit-frame-pointer -g
prof_link  = -lbenchmark


# -------------------------------------------------------------- Rules

# Compile precompiled header
rule pch
     depfile = $out.d
     deps = gcc
     command = $CC -x c++-header $o_flag $cpp_flags -MMD -MF $out.d -c $in -o $out
     description = $cc_desc -c $in -o $out

# Compile cpp with precompiled header
rule cpp_pch
     depfile = $out.d
     deps = gcc
     command = $CC -x c++ -include $builddir/$pchfile $o_flag $cpp_flags -MMD -MF $out.d -c $in -o $out
     description = $cc_desc -c $in -o $out

# Compile cpp
rule cpp
     depfile = $out.d
     deps = gcc
     command = $CC -x c++ $o_flag $cpp_flags -MMD -MF $out.d -c $in -o $out
     description = $cc_desc -c $in -o $out

rule c_rule_pch
     depfile = $out.d
     deps = gcc
     command = $CC -x c $o_flag $c_flags -MMD -MF $out.d -c $in -o $out
     description = $cc_desc -c $in -o $out
     
rule c_rule
     depfile = $out.d
     deps = gcc
     command = $CC -x c $o_flag $c_flags -MMD -MF $out.d -c $in -o $out
     description = $cc_desc -c $in -o $out

rule moc
     depfile = $out.d
     deps = gcc
     command = $MOC $in | $CC -x c++ $o_flag $cpp_flags -MMD -MF $out.d -c - -o $out
     description = moc $in

rule qrc
     command = $RCC $in | $CC -x c++ $o_flag $cpp_flags -c - -o $out
     description = rcc $in

rule proto
     command = protoc --cpp_out=. $in && sed -i 's,include "src/,include ",' $out
     description = protoc $in

# Link
rule link_exec
     command = $CC -o $out $in $link_flags
     description = $cc_desc link -o $out

rule link_shared
     command = $CC -o $out -shared $in $link_flags
     description = $cc_desc shared -o $out

rule make_static
     command = ar rcs $out $in
     description = static $out

rule link_boost_py
     command = $CC -o $out -Wl,-h -Wl,$out -shared -Wl,--start-group $in $link_flags -Wl,--end-group
     description = $cc_desc boost-py -o $out

# Scanbuild
rule analyze
     command = $CC --analyze -Xanalyzer -analyzer-output=text $cpp_flags $in
     description = $cc_desc --analyze ... -o $builddir/scanbuild     

# Subbuild
rule subbuild
     command = $in $toolchain $config
     

# These are the default which should be overridden
root       = .
target     = products/clang-5.0-release/alglib.a
toolchain  = clang-5.0
config     = release
hyphen     = -
builddir   = /tmp/build-amichaux/$toolchain$hyphen$config/$target
target_def = -DTARGET="alglib.a"

o_flag     = -O2
c_flags    = $target_def $w_flags $f_flags $r_flags 
cpp_flags  = $cpp_std $c_flags
link_flags = $l_flags

# User-config autogenerated by 'ninja-files/make-user-ninja.sh'
cpp_flags  = $cpp_flags -Wno-vla -Wno-strict-aliasing -Wno-unused-parameter -Wno-uninitialized -Wno-unused -Wno-ignored-qualifiers -Wno-extra
 
link_flags = $link_flags -lpthread



# source
build $builddir/cpp/src/alglibinternal.o: cpp $root/cpp/src/alglibinternal.cpp
build $builddir/cpp/src/alglibmisc.o: cpp $root/cpp/src/alglibmisc.cpp
build $builddir/cpp/src/ap.o: cpp $root/cpp/src/ap.cpp
build $builddir/cpp/src/dataanalysis.o: cpp $root/cpp/src/dataanalysis.cpp
build $builddir/cpp/src/diffequations.o: cpp $root/cpp/src/diffequations.cpp
build $builddir/cpp/src/fasttransforms.o: cpp $root/cpp/src/fasttransforms.cpp
build $builddir/cpp/src/integration.o: cpp $root/cpp/src/integration.cpp
build $builddir/cpp/src/interpolation.o: cpp $root/cpp/src/interpolation.cpp
build $builddir/cpp/src/linalg.o: cpp $root/cpp/src/linalg.cpp
build $builddir/cpp/src/optimization.o: cpp $root/cpp/src/optimization.cpp
build $builddir/cpp/src/solvers.o: cpp $root/cpp/src/solvers.cpp
build $builddir/cpp/src/specialfunctions.o: cpp $root/cpp/src/specialfunctions.cpp
build $builddir/cpp/src/statistics.o: cpp $root/cpp/src/statistics.cpp

# target
build $target: make_static $builddir/cpp/src/alglibinternal.o $builddir/cpp/src/alglibmisc.o $builddir/cpp/src/ap.o $builddir/cpp/src/dataanalysis.o $builddir/cpp/src/diffequations.o $builddir/cpp/src/fasttransforms.o $builddir/cpp/src/integration.o $builddir/cpp/src/interpolation.o $builddir/cpp/src/linalg.o $builddir/cpp/src/optimization.o $builddir/cpp/src/solvers.o $builddir/cpp/src/specialfunctions.o $builddir/cpp/src/statistics.o 

# scanbuild (target)
build scanbuild: analyze $root/cpp/src/alglibinternal.cpp $root/cpp/src/alglibmisc.cpp $root/cpp/src/ap.cpp $root/cpp/src/dataanalysis.cpp $root/cpp/src/diffequations.cpp $root/cpp/src/fasttransforms.cpp $root/cpp/src/integration.cpp $root/cpp/src/interpolation.cpp $root/cpp/src/linalg.cpp $root/cpp/src/optimization.cpp $root/cpp/src/solvers.cpp $root/cpp/src/specialfunctions.cpp $root/cpp/src/statistics.cpp 

# default
default $target

